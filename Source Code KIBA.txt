/*This project is a Python-based voice assistant named "Kiba". It demonstrates the integration of text-to-speech, speech recognition,
and automation capabilities to assist users with various tasks. Kiba acts as an interactive virtual assistant capable of responding to user commands, 
fetching information, and performing actions on the computer*/.


import pyttsx3
import datetime        //built-in module
import speech_recognition as sr   //extracts text as string from voices
import wikipedia
import webbrowser            //in-built
import os
import pywhatkit
import pyjokes


//pyttsx3 is a Python library that provides a simple way to interface with text-to-speech (TTS) engines.//
//In the line engine = pyttsx3.init('sapi5'), you're initializing the pyttsx3 text-to-speech engine with the SAPI5 (Speech Application Programming Interface 
   version as the backend.

engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')
engine.setProperty('voice',voices[1].id)


def speak(audio):
    engine.say(audio)
    engine.runAndWait()
def wishMe():
    hour = int(datetime.datetime.now().hour)
    if hour>=0 and hour<12:
        speak("good morning!")
    elif hour>=12 and hour<18:
        speak("good afternoon!")
    else:
        speak("good evening")
    speak("I am kiba ,Your Personal Assistant. Please tell me how may I help you")
def takeCommand():

    #takes microphone input from user and retruns string output

    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("listening...")
        r.pause_threshold = 1      #wait 1 sec after u complete speaking )
        audio = r.listen(source)   #audio = r.listen(source) is used to capture audio data from a given audio source (source) using a Recognizer object (r).
    try:
        print("Recognizing...")
        query = r.recognize_google(audio,language='en-in')   #transcription of audio into text using Google's Web Speech API 
        print(f"user said: {query}\n")
    except Exception as e:

        print("repeat again...")
        return "None"
    return query



if __name__=="__main__":
    wishMe()
    while True:
        query = takeCommand().lower()
        if 'who is' in query:
            speak("searching wikipedia...")
            query = query.replace("wikipedia", "")     #wikipedia.summary() function, the word "wikipedia" doesn't interfere with the search. Removing it allows                                                             for a cleaner and more focused search query.
            results = wikipedia.summary(query, sentences=2)     # prints only two lines
            speak("according to wikipedia")
            print(results)
            speak(results)

        elif 'single' in query:
            speak('sorry , but i am taken')

        elif 'joke' in query :
            speak(pyjokes.get_joke())

        elif 'open youtube ' in query:
            webbrowser.open('www.youtube.com')

        elif 'open google ' in query:
            webbrowser.open('www.google.co.in')

        elif 'play music' in query:
            music_dir = 'D:\\music'
            songs = os.listdir(music_dir)
            print(songs)
            os.startfile(os.path.join(music_dir, songs[0]))    # os.startfile =open a file or an application using its default program associated with its file                                                                       xtype in the Windows operating system
                                                               #os.path.join = join the directory path (music_dir) and the filename (songs[0]) to create the full                                                                     path to the music file.

        elif 'play' in query:

            song = takeCommand()
            speak('playing' + song)
            pywhatkit.playonyt(song)



        elif 'time' in query:
            strtime = datetime.datetime.now().strftime("%I:%M:%p")
            print(strtime)
            speak(f"sir , the current time is {strtime}")


        elif 'open chrome' in query:
            chromePath = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
            os.startfile(chromePath)

        elif 'open brave' in query:
            bravePath = "C:\\Program Files\\BraveSoftware\\Brave-Browser\\Application\\brave.exe"
            os.startfile(bravePath)

        elif 'open powerpoint' in query:
            powerpointPath = "C:\\Program Files\\Microsoft Office\\root\\Office16\\POWERPNT.EXE"
            os.startfile(powerpointPath)

        

        elif 'exit' in query:
            exit()










